apiVersion: v1
kind: ConfigMap
metadata:
  name: fluentd-conf
data:
  fluent.conf : |-
    <source>
      @type tail
      path /var/log/logDemo/log/info.log
      pos_file /fluentd/demo.logs.pos
      tag demo.logs
      read_from_head true
      <parse>
        @type none
      </parse>
    </source>

    <filter demo.logs>
      @type parser
      key_name message
      <parse>
        @type regexp
        expression /^(?<logtime>[^|]+) \| (?<level>[A-Z]*) *\| __main__:(?<class>\D*:\d*) - (?<content>.*)$/
        time_key logtime
        time_format %Y-%m-%d %H:%M:%S.%L
      </parse>
    </filter>

    <filter demo.logs>
      @type record_transformer
      enable_ruby
      <record>
        content ${record["content"].gsub("'", '"')}
      </record>
    </filter>

    <filter demo.logs>
      @type parser
      key_name content
      reserve_data true
      remove_key_name_field true
      <parse>
        @type json
      </parse>
    </filter>

    <filter demo.logs>
      @type geoip
      geoip_lookup_keys remote_address
      geoip2_database /fluentd/GeoLite2-City.mmdb
      backend_library geoip2_c
      <record>
        geoip_city            ${city.names.en["remote_address"]}
        geoip_latitude        ${location.latitude["remote_address"]}
        geoip_longitude       ${location.longitude["remote_address"]}
        geoip_country         ${country.iso_code["remote_address"]}
        geoip_country_name    ${country.names.en["remote_address"]}
        geoip_postal_code     ${postal.code["remote_address"]}
        geoip_region_name     ${subdivisions.0.names.en["remote_address"]}
      </record>
    </filter>

    <match demo.logs>
      @type elasticsearch
      host elasticsearch-es-http.elk.svc
      port 9200
      default_elasticsearch_version 8
      user elastic
      scheme https
      password N6TxB70x2A6S1Np1G87iH3vE
      ssl_verify false
      index_name fluentd-${tag}
      <buffer>
        @type file
        path /fluentd/buf/demo.logs.*
      </buffer>
    </match>